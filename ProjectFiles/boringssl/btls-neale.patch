diff --git a/CMakeLists.txt b/CMakeLists.txt
index e0bf7cb2a..e28b90b1f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -468,7 +468,7 @@ elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "mips")
   set(ARCH "generic")
 elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ppc64le")
   set(ARCH "ppc64le")
-elseif(${CMAKE SYSTEM_PROCESSOR} STREQUAL "s390x")
+elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "s390x")
   set(ARCH "s390x")
 else()
   message(FATAL_ERROR "Unknown processor:" ${CMAKE_SYSTEM_PROCESSOR})
diff --git a/crypto/CMakeLists.txt b/crypto/CMakeLists.txt
index 017a06a0a..27444bf8b 100644
--- a/crypto/CMakeLists.txt
+++ b/crypto/CMakeLists.txt
@@ -254,6 +254,7 @@ add_library(
   cpu-aarch64-linux.c
   cpu-arm-linux.c
   cpu-arm.c
+  cpu-s390x.c
   cpu-intel.c
   cpu-ppc64le.c
   crypto.c
diff --git a/crypto/cpu-s390x.c b/crypto/cpu-s390x.c
index daacd0883..b71d205da 100644
--- a/crypto/cpu-s390x.c
+++ b/crypto/cpu-s390x.c
@@ -1,3 +1,4 @@
+#ifdef OPENSSL_S390X
 
 #include <openssl/base.h>
 #include "../../internal.h"
@@ -6,22 +7,17 @@
 #include <stdlib.h>
 #include <dlfcn.h>
 
+static void *handle = NULL;
 
-
-
-int is_s390x_capable(){
-    void *handle;
-    int  *iptr;
-    int *pointerArray[100]; // To be used to store the addresses of the symbols.
+int CRYPTO_is_s390x_capable()
+{
     handle = dlopen("filename",RTLD_NOW);
      if (!handle) {
         fprintf(stderr, "%s\n", dlerror());
         exit(EXIT_FAILURE);
     }
-    
 }
 
-
 int aes_hw_set_encrypt_key(const uint8_t *user_key, const int bits,
                            AES_KEY *key) {
 
@@ -52,12 +48,11 @@ void aes_hw_cbc_encrypt(const uint8_t *in, uint8_t *out,
                          unsigned int) = NULL;
 
    if (ica_aes_cbc == NULL) {
-        handle = dlopen("filename",RTLD_NOW);
-        if (!handle) {
-            fprintf(stderr, "%s\n", dlerror());
-            exit(EXIT_FAILURE);
-        }
        ica_aes_cbc = dlsym(handle, epName);
+        if (ica_aes_cbc == NULL) {
+            perror("Error locating symbol ica_aes_cbc");
+            abort();
+        }
    }
     ica_aes_cbc(in_data, out_data, data_length, aeskey->rd_key, key_length, ICA_ENCRYPT);
 }
@@ -70,10 +65,9 @@ void aes_hw_encrypt(const uint8_t *in, uint8_t *out, const AES_KEY *key) {
                 unsigned char *) = NULL;
 
    if (ica_aes_encrypt == NULL) {
-        handle = dlopen("filename",RTLD_NOW);
-        if (!handle) {
-            fprintf(stderr, "%s\n", dlerror());
-            exit(EXIT_FAILURE);
+        if (ica_aes_encrypt == NULL) {
+            perror("Error locating symbol ica_aes_encrypt");
+            abort();
         }
        ica_aes_encrypt = dlsym(handle, epName);
    }
@@ -90,12 +84,11 @@ void aes_hw_decrypt(const uint8_t *in, uint8_t *out, const AES_KEY *key) {
                 unsigned char *) = NULL;
 
    if (ica_aes_encrypt == NULL) {
-        handle = dlopen("filename",RTLD_NOW);
-        if (!handle) {
-            fprintf(stderr, "%s\n", dlerror());
-            exit(EXIT_FAILURE);
-        }
        ica_aes_encrypt = dlsym(handle, epName);
+        if (ica_aes_encrypt == NULL) {
+            perror("Error locating symbol ica_aes_encrypt");
+            abort();
+        }
    }
 
     (void) ica_aes_cbc(in_data, out_data, data_length, aeskey->rd_key, key_length, ICA_DECRYPT);
@@ -121,3 +114,4 @@ void aes_hw_decrypt(const uint8_t *in, uint8_t *out, const AES_KEY *key) {
 //     (void) ica_aes_ctr(in_data, out_data,  data_length,aes->rd_key, key_length, *ctr, 16,ICA_ENCRYPT);
 
 // }
+#endif
diff --git a/crypto/fipsmodule/des/internal.h b/crypto/fipsmodule/des/internal.h
index 9b3d23456..6cd60c1f5 100644
--- a/crypto/fipsmodule/des/internal.h
+++ b/crypto/fipsmodule/des/internal.h
@@ -57,7 +57,8 @@
 #ifndef OPENSSL_HEADER_DES_INTERNAL_H
 #define OPENSSL_HEADER_DES_INTERNAL_H
 
-#include <openssl/base.h>
+#include <openssl/des.h>
+#include <openssl/cpu.h>
 #include "../../internal.h"
 
 #if defined(__cplusplus)
@@ -66,26 +67,29 @@ extern "C" {
 
 #if !defined(OPENSSL_NO_ASM)
 
-#if defined(OPENSSL_S390X)
-#define HWDES
+# if defined(OPENSSL_S390X)
+# define HWDES
 
 OPENSSL_INLINE int hwdes_capable(void) {
-  return is_s390x_capable();
+  return CRYPTO_is_s390x_capable();
 }
 
+# endif // S390X
+
+#endif // NO_ASM
 
 #if defined(HWDES)
 
 int des_hw_set_encrypt_key(const uint8_t *user_key, const int bits,
-                           DES_KEY *key);
+                           DES_cblock *key);
 int des_hw_set_decrypt_key(const uint8_t *user_key, const int bits,
-                           DES_KEY *key);
-void des_hw_encrypt(const uint8_t *in, uint8_t *out, const DES_KEY *key);
-void des_hw_decrypt(const uint8_t *in, uint8_t *out, const DES_KEY *key);
+                           DES_cblock *key);
+void des_hw_encrypt(const uint8_t *in, uint8_t *out, const DES_cblock *key);
+void des_hw_decrypt(const uint8_t *in, uint8_t *out, const DES_cblock *key);
 void des_hw_cbc_encrypt(const uint8_t *in, uint8_t *out, size_t length,
-                        const DES_KEY *key, uint8_t *ivec, const int enc);
+                        const DES_cblock *key, uint8_t *ivec, const int enc);
 void des_hw_ctr32_encrypt_blocks(const uint8_t *in, uint8_t *out, size_t len,
-                                 const DES_KEY *key, const uint8_t ivec[16]);
+                                 const DES_cblock *key, const uint8_t ivec[16]);
 
 #else
 
@@ -94,33 +98,33 @@ void des_hw_ctr32_encrypt_blocks(const uint8_t *in, uint8_t *out, size_t len,
 OPENSSL_INLINE int hwdes_capable(void) { return 0; }
 
 OPENSSL_INLINE int des_hw_set_encrypt_key(const uint8_t *user_key, int bits,
-                                          DES_KEY *key) {
+                                          DES_cblock *key) {
   abort();
 }
 
 OPENSSL_INLINE int des_hw_set_decrypt_key(const uint8_t *user_key, int bits,
-                                          DES_KEY *key) {
+                                          DES_cblock *key) {
   abort();
 }
 
 OPENSSL_INLINE void des_hw_encrypt(const uint8_t *in, uint8_t *out,
-                                   const DES_KEY *key) {
+                                   const DES_cblock *key) {
   abort();
 }
 
 OPENSSL_INLINE void des_hw_decrypt(const uint8_t *in, uint8_t *out,
-                                   const DES_KEY *key) {
+                                   const DES_cblock *key) {
   abort();
 }
 
 OPENSSL_INLINE void des_hw_cbc_encrypt(const uint8_t *in, uint8_t *out,
-                                       size_t length, const DES_KEY *key,
+                                       size_t length, const DES_cblock *key,
                                        uint8_t *ivec, int enc) {
   abort();
 }
 
 OPENSSL_INLINE void des_hw_ctr32_encrypt_blocks(const uint8_t *in, uint8_t *out,
-                                                size_t len, const DES_KEY *key,
+                                                size_t len, const DES_cblock *key,
                                                 const uint8_t ivec[16]) {
   abort();
 }
diff --git a/include/openssl/cpu.h b/include/openssl/cpu.h
index eb36a57e0..d4279b6a8 100644
--- a/include/openssl/cpu.h
+++ b/include/openssl/cpu.h
@@ -190,6 +190,14 @@ extern unsigned long OPENSSL_ppc64le_hwcap2;
 
 #endif  // OPENSSL_PPC64LE
 
+#if defined(OPENSSL_S390X)
+
+// CRYPTO_is_s390x_capable returns true iff the current CPU supports
+// the hardware crypto facility
+int CRYPTO_is_s390x_capable(void);
+
+#endif  // OPENSSL_S390X
+
 #if !defined(NDEBUG) && !defined(BORINGSSL_FIPS)
 // Runtime CPU dispatch testing support
 